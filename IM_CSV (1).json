{
  "pipelineConfig" : {
    "schemaVersion" : 1,
    "version" : 5,
    "uuid" : "fc7edc25-ab80-4519-9bb6-48a484c1195c",
    "description" : "",
    "configuration" : [ {
      "name" : "executionMode",
      "value" : "STANDALONE"
    }, {
      "name" : "deliveryGuarantee",
      "value" : "AT_LEAST_ONCE"
    }, {
      "name" : "shouldRetry",
      "value" : true
    }, {
      "name" : "retryAttempts",
      "value" : -1
    }, {
      "name" : "memoryLimit",
      "value" : "${jvm:maxMemoryMB() * 0.65}"
    }, {
      "name" : "memoryLimitExceeded",
      "value" : "STOP_PIPELINE"
    }, {
      "name" : "notifyOnStates",
      "value" : [ "RUN_ERROR", "STOPPED", "FINISHED" ]
    }, {
      "name" : "emailIDs",
      "value" : [ ]
    }, {
      "name" : "constants",
      "value" : [ {
        "key" : "origin",
        "value" : "/vagrant/IM-testing/origin"
      }, {
        "key" : "destination",
        "value" : "/vagrant/IM-testing/destination"
      }, {
        "key" : "error",
        "value" : "/vagrant/IM-testing/error"
      }, {
        "key" : "DT",
        "value" : "date"
      }, {
        "key" : "CT",
        "value" : "country"
      }, {
        "key" : "ID",
        "value" : "indicator"
      }, {
        "key" : "VL",
        "value" : "value"
      } ]
    }, {
      "name" : "badRecordsHandling",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_recordstolocalfilesystem_ToErrorLocalFSDTarget::1"
    }, {
      "name" : "statsAggregatorStage",
      "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_StatsNullDTarget::1"
    }, {
      "name" : "clusterSlaveMemory",
      "value" : 1024
    }, {
      "name" : "clusterSlaveJavaOpts",
      "value" : "-XX:PermSize=128M -XX:MaxPermSize=256M -Dlog4j.debug"
    }, {
      "name" : "clusterLauncherEnv",
      "value" : [ ]
    }, {
      "name" : "mesosDispatcherURL",
      "value" : null
    }, {
      "name" : "hdfsS3ConfDir",
      "value" : null
    }, {
      "name" : "rateLimit",
      "value" : 0
    } ],
    "uiInfo" : {
      "previewConfig" : {
        "previewSource" : "CONFIGURED_SOURCE",
        "batchSize" : 10,
        "timeout" : 10000,
        "writeToDestinations" : false,
        "showHeader" : true,
        "showFieldType" : true,
        "rememberMe" : false
      }
    },
    "stages" : [ {
      "instanceName" : "com_streamsets_pipeline_stage_origin_spooldir_SpoolDirDSource_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_origin_spooldir_SpoolDirDSource",
      "stageVersion" : "7",
      "configuration" : [ {
        "name" : "conf.dataFormatConfig.charset",
        "value" : "UTF-8"
      }, {
        "name" : "conf.dataFormatConfig.removeCtrlChars",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.compression",
        "value" : "NONE"
      }, {
        "name" : "conf.dataFormatConfig.filePatternInArchive",
        "value" : "*"
      }, {
        "name" : "conf.dataFormatConfig.textMaxLineLen",
        "value" : 1024
      }, {
        "name" : "conf.dataFormatConfig.jsonContent",
        "value" : "MULTIPLE_OBJECTS"
      }, {
        "name" : "conf.dataFormatConfig.jsonMaxObjectLen",
        "value" : 4096
      }, {
        "name" : "conf.dataFormatConfig.csvFileFormat",
        "value" : "CSV"
      }, {
        "name" : "conf.dataFormatConfig.csvHeader",
        "value" : "WITH_HEADER"
      }, {
        "name" : "conf.dataFormatConfig.csvMaxObjectLen",
        "value" : 33554432
      }, {
        "name" : "conf.dataFormatConfig.csvCustomDelimiter",
        "value" : "|"
      }, {
        "name" : "conf.dataFormatConfig.csvCustomEscape",
        "value" : "\\"
      }, {
        "name" : "conf.dataFormatConfig.csvCustomQuote",
        "value" : "\""
      }, {
        "name" : "conf.dataFormatConfig.csvRecordType",
        "value" : "LIST_MAP"
      }, {
        "name" : "conf.dataFormatConfig.csvSkipStartLines",
        "value" : 0
      }, {
        "name" : "conf.dataFormatConfig.xmlRecordElement",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.xmlMaxObjectLen",
        "value" : 4096
      }, {
        "name" : "conf.dataFormatConfig.logMode",
        "value" : "COMMON_LOG_FORMAT"
      }, {
        "name" : "conf.dataFormatConfig.logMaxObjectLen",
        "value" : 1024
      }, {
        "name" : "conf.dataFormatConfig.retainOriginalLine",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.customLogFormat",
        "value" : "%h %l %u %t \"%r\" %>s %b"
      }, {
        "name" : "conf.dataFormatConfig.regex",
        "value" : "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\d+)"
      }, {
        "name" : "conf.dataFormatConfig.fieldPathsToGroupName",
        "value" : [ {
          "fieldPath" : "/",
          "group" : 1
        } ]
      }, {
        "name" : "conf.dataFormatConfig.grokPatternDefinition",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.grokPattern",
        "value" : "%{COMMONAPACHELOG}"
      }, {
        "name" : "conf.dataFormatConfig.onParseError",
        "value" : "ERROR"
      }, {
        "name" : "conf.dataFormatConfig.maxStackTraceLines",
        "value" : 50
      }, {
        "name" : "conf.dataFormatConfig.enableLog4jCustomLogFormat",
        "value" : false
      }, {
        "name" : "conf.dataFormatConfig.log4jCustomLogFormat",
        "value" : "%r [%t] %-5p %c %x - %m%n"
      }, {
        "name" : "conf.dataFormatConfig.avroSchema",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.protoDescriptorFile",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.messageType",
        "value" : null
      }, {
        "name" : "conf.dataFormatConfig.isDelimited",
        "value" : true
      }, {
        "name" : "conf.dataFormatConfig.binaryMaxObjectLen",
        "value" : 1024
      }, {
        "name" : "conf.dataFormat",
        "value" : "DELIMITED"
      }, {
        "name" : "conf.spoolDir",
        "value" : "${origin}"
      }, {
        "name" : "conf.allowLateDirectory",
        "value" : false
      }, {
        "name" : "conf.overrunLimit",
        "value" : 256
      }, {
        "name" : "conf.batchSize",
        "value" : 10000
      }, {
        "name" : "conf.poolingTimeoutSecs",
        "value" : 1
      }, {
        "name" : "conf.useLastModified",
        "value" : "TIMESTAMP"
      }, {
        "name" : "conf.filePattern",
        "value" : "*.csv"
      }, {
        "name" : "conf.maxSpoolFiles",
        "value" : 1000
      }, {
        "name" : "conf.initialFileToProcess",
        "value" : ""
      }, {
        "name" : "conf.errorArchiveDir",
        "value" : null
      }, {
        "name" : "conf.postProcessing",
        "value" : "NONE"
      }, {
        "name" : "conf.archiveDir",
        "value" : null
      }, {
        "name" : "conf.retentionTimeMins",
        "value" : 0
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      } ],
      "uiInfo" : {
        "yPos" : 50,
        "stageType" : "SOURCE",
        "rawSource" : {
          "configuration" : [ {
            "name" : "fileName",
            "value" : "/vagrant/IM-testing/origin/RanksScores.csv"
          } ]
        },
        "description" : "",
        "label" : "CSV Pickup",
        "xPos" : 60
      },
      "inputLanes" : [ ],
      "outputLanes" : [ "com_streamsets_pipeline_stage_origin_spooldir_SpoolDirDSource_01OutputLane14656964692430" ]
    }, {
      "instanceName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "expressionProcessorConfigs",
        "value" : [ {
          "fieldToSet" : "/'filename'",
          "expression" : "${record:attribute('filename')}"
        } ]
      }, {
        "name" : "headerAttributeConfigs",
        "value" : [ ]
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "Because you can't access record header attributes in the JavaScript evaluator, the header attribute for filename must be inputted as data within the record so it is reachable by the JavaScript evaluator. The downside this is that you always have a column with filename and you have to remember to ignore it when populating Values to output.",
        "label" : "Add field for filename",
        "xPos" : 280,
        "yPos" : 50,
        "stageType" : "PROCESSOR"
      },
      "inputLanes" : [ "com_streamsets_pipeline_stage_origin_spooldir_SpoolDirDSource_01OutputLane14656964692430" ],
      "outputLanes" : [ "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor_01OutputLane14669864202300" ]
    }, {
      "instanceName" : "com_streamsets_pipeline_stage_processor_javascript_JavaScriptDProcessor_01",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_javascript_JavaScriptDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "processingMode",
        "value" : "BATCH"
      }, {
        "name" : "script",
        "value" : "function outputRecord(record, indicator, country, date, value){\n    if(parseFloat(value).isNaN()){\n        record.value = { \n            '${ID}' : indicator.toString(),\n            '${CT}' : country.toString(),\n            '${DT}' : parseFloat(date),\n            '${VL}' : value.toString(),\n            'filename' : fn.toString(),\n        };\n    } else {\n        record.value = { \n            '${ID}' : indicator.toString(),\n            '${CT}' : country.toString(),\n            '${DT}' : parseFloat(date),\n            '${VL}' : parseFloat(value.replace(',', '')),\n            'filename' : fn.toString(),\n        };\n    }\n    output.write(record);\n}\nfunction ONI(){\n    function writeRecords(Values, year, country, cc){\n        for(key in Values){\n            var value = Values[key];\n            // value : Political Score\n            // key   : indicator\n            var ind;\n            switch(key){\n                case 'political_score':\n                    ind = \"ONIp\";\n                    break;\n                case 'social_score':\n                    ind = \"ONIs\";\n                    break;\n                case 'tools_score':\n                    ind = \"ONIit\";\n                    break;\n                case 'conflict/security_score':\n                    ind = \"ONIcs\";\n                    break;\n                case 'transparency':\n                    ind = \"ONItr\";\n                    break;\n                case 'consistency':\n                    ind = \"ONIco\";\n                    break;\n            }\n            outputRecord(records[i], ind, cc, year, value);\n        }\n    }\n\n    var cc = records[i].value['country_code'];\n    var country = records[i].value['country'];\n    var year = records[i].value['testing_date'];\n    var Values = {};\n    for (key in records[i].value){\n        var value = records[i].value[key];\n        if(value != 'n/a' && key != 'filename' && key != 'social_description' && key != 'tools_description' && key != 'conflict_security_description' && key != 'political_description' && key != 'country' && key != 'country_code' && key != 'testing_date' && key != 'url'){\n            Values[key] = value;\n        }\n    }\n    writeRecords(Values, year, country, cc);\n\n}\nfunction cellsub(){ \n    function writeRecords(Values, country){\n        for(key in Values){\n            var value = Values[key];\n            // value : cellsub\n            // key   : year\n            outputRecord(records[i],'cellsub',country, key, value);\n        }\n    } \n    records[i].value.Values = {};\n    var country  = records[i].value['country'];\n    for(key in records[i].value){\n        var value = records[i].value[key];\n        if(value != \"\" && key > 1950){\n            records[i].value['Values'][key] = value;\n        }\n    }\n    var Values = records[i].value['Values'];\n    writeRecords(Values, country); \n}\nfunction gdp_pop(){ \n    function writeRecords(Values, indicator){\n        var ind;\n        switch (indicator){\n            case 'GDP per capita (current US$)':\n                ind = 'gdpcapus';\n                break;\n            case 'GDP per capita, PPP (current international $)':\n                ind = 'gdpcapppp';\n                break;\n            case 'Population, total':\n                ind = 'pop';\n                break; \n        }\n        for(key in Values){\n            var value = Values[key];\n            // value : gdpcapppp, gdpcapus, or pop\n            // key   : year\n            outputRecord(records[i], ind, records[i].value['${CT}'], key, value);\n        }\n    } \n    var indicator = records[i].value['Indicator Name'];\n    records[i].value.Values = {};\n    records[i].value['${CT}'] = records[i].value['Country Code'];\n    records[i].value['test'] = indicator;\n    for(key in records[i].value){\n        var value = records[i].value[key];\n        if(value != \"\" && key > 1950){\n            records[i].value['Values'][key] = value;\n        }\n    }\n    var Values = records[i].value['Values'];\n    writeRecords(Values, indicator);\n}\nfunction nri1_68(){\n    function writeRecords(Values, year, indicator){\n        for(key in Values){\n            var value = Values[key];\n            // value : GDP per capita\n            // key   : year\n            outputRecord(records[i],'nri'+indicator,key, year, value);\n        }\n    }\n    if(records[i].value['Attribute'] == 'Value'){\n\n        var YR = \"Edition\"; \n        var indicator = \"Placement\";\n\n        // Save Country Data\n        var indicator = records[i].value[indicator];\n        var year = records[i].value[YR];\n\n        records[i].value.Values = {};\n        for(key in records[i].value){\n            var value = records[i].value[key];\n            if(key.length == 3 && value != \"\" && value != 'n/a'){\n                records[i].value['Values'][key] = value;\n            }\n        }\n        // Save the map of values that was originally saved in the Record \n        // Under the 'Values' field\n        var Values = records[i].value['Values'];\n        writeRecords(Values, year, indicator);\n\n    }\n}\nfunction ipr_mf(){\n    function writeRecords(Values, year, country){\n        for(key in Values){\n            var value = Values[key];\n            var indicator;\n\n            if(key == 'Male'){\n                indicator = 'ipr_m'; \n            } else {\n                indicator = 'ipr_f';\n            }\n\n            outputRecord(records[i], indicator, country, year, value);\n        }\n    }\n    // Save Country Data\n    var year = records[i].value['year'];\n    var country = records[i].value['country'];\n\n    var Values = {};\n    for(key in records[i].value){\n        var value = records[i].value[key];\n        if(key != 'filename' && key != 'country' && key != 'year'){\n            Values[key] = value;\n        }\n    }\n    // Save the map of values that was originally saved in the Record \n    // Under the 'Values' field\n    writeRecords(Values, year, country);\n}\nfunction ipr_fixnetsub(){\n    function writeRecords(Values, filename){\n        var indicator;\n        if(filename == 'Fixed_broadband_2000-2014.csv'){\n            indicator = 'fixnetsub';\n        }\n        if(filename == 'Individuals_Internet_2000-2014.csv'){\n            indicator = 'ipr';\n        }\n        for(key in Values){\n            var value = Values[key];\n            // value : ipr, fixnetsub\n            // key   : year\n            outputRecord(records[i], indicator, records[i].value['${CT}'], key, value);\n        }\n    }\n\n    records[i].value.Values = {};\n    records[i].value['${CT}'] = records[i].value['country']; // 1. Alter this line to the column that identifys the Country\n    var filename = records[i].value['filename'];\n    for(key in records[i].value){\n        var value = records[i].value[key];\n        if(value != \"\" && key > 1950){\n            records[i].value['Values'][key] = value;\n        }\n    }\n    var Values = records[i].value['Values'];\n    writeRecords(Values, filename);\n}\nfunction WebIndexData(){\n    function writeRecords(Values){\n        for(key in Values){\n            var value = Values[key];\n            // value : GDP per capita\n            // key   : year\n            outputRecord(records[i], records[i].value['${ID}'], records[i].value['${CT}'], key, value);\n        }\n    }\n    function findIndicator(i){\n        var indicator = \"\";\n        for(key in records[i].value){ // Uses for loop because records are treated as maps (not arrays or lists)\n            switch(key){\n                case \"WB H school life expectancy female/male\": // WB H.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"WB H school life expectancy female/male\"];\n                    indicator = \"wbschoollifeexpfm\";\n                    break;\n                case \"Secondary enrolment rates (gross)\": // WB D.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"Secondary enrolment rates (gross)\"];\n                    indicator = \"secondenroll\";\n                    break;\n                case \"tertiary enrolment rates (gross) female/male\": // WB C.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"tertiary enrolment rates (gross) female/male\"];\n                    indicator = \"wbtertiaryenrollfm\";\n                    break;\n                case \"Secure Internet Servers per million population\": // WB A.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"Secure Internet Servers per million population\"];\n                    indicator = \"secservpermillion\";\n                    break;\n                case \"E-participation index\": // UN D.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"E-participation index\"];\n                    indicator = \"wieparticipation\";\n                    break;\n                case \"Government online services index\": // UN C.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"Government online services index\"];\n                    indicator = \"wigos\";\n                    break;\n                case \"Press Freedom Index\": // RSF A.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"Press Freedom Index\"];\n                    indicator = \"pressfreedom\";\n                    break;\n                case \"IXPs (if have IXPs=1; if not=0)\": // PCH A.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"IXPs (if have IXPs=1; if not=0)\"];\n                    indicator = \"ixp\";\n                    break;\n                case \"Mobile broadband monthly subscription per GDPC\": // ITU S.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"Mobile broadband monthly subscription per GDPC\"];\n                    indicator = \"mbbmonthsubpergdpc\";\n                    break;\n                case \"Freedom House - Freedom of the press\": // FH C.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"Freedom House - Freedom of the press\"];\n                    indicator = \"fhpress\";\n                    break;\n                case \"Freedom House - Civil Rights\": // FH B.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"Freedom House - Civil Rights\"];\n                    indicator = \"fhcivil\";\n                    break;\n                case \"Freedom House - Political Rights\": // FH A.csv\n                    records[i].value[\"${CT}\"] = records[i].value[\"Freedom House - Political Rights\"];\n                    indicator = \"fhpolitical\";\n                    break;\n            }\n            return indicator;\n        }\n    }\n    var indicator = \"\";\n    indicator = findIndicator(i);\n    records[i].value[\"${ID}\"] = indicator;\n\n    records[i].value.Values = {};\n    for (key in records[i].value){\n        var value = records[i].value[key];\n        if(key > 2000 && value != '..' && value != \"\"){\n            records[i].value['Values'][key] = value;\n        }\n    }\n    var Values = records[i].value['Values'];\n    writeRecords(Values); // will write errors when there are no values in the Values map (ie. '..' and '')\n}\nfunction WebIndexSurvey(){\n    function writeRecords(Values, country){\n        var regex1 = new RegExp(\"[A-Z]{2,3}\");\n        var regex2 = new RegExp(\"[0-9]{4}\");\n        var regex3 = new RegExp(\"[A-Z][0-9]+\");\n        for(key in Values){\n            var value = Values[key];\n            // value : survey score\n            var year = regex2.exec(key); // grab year from key\n            var indicator = regex1.exec(key) + regex3.exec(key); // grab correct format of indicator from key\n            outputRecord(records[i], indicator.toLowerCase(), country, year, value);\n        }\n    } \n    var country = records[i].value['Country'];\n    var Values = {};\n    for (key in records[i].value){\n        var value = records[i].value[key];\n        if(key != 'Country' && key != 'filename'){\n            Values[key] = value;\n        }\n    }\n    writeRecords(Values, country);\n}\nfunction WebIndexScores(){\n    function writeRecords(Values, Countries){\n        var regex = new RegExp(\".+?(?=-)\");\n        for(key in Values){\n            var value = Values[key];\n            var country = Countries[key];\n            var indicator;\n            switch(key){\n                case 'Universal Access':\n                    indicator = 'wiuniversalaccess';\n                    break;\n                case 'Freedom & Openness':\n                    indicator = 'wifreedom';\n                    break;\n                case 'Relevant content':\n                    indicator = 'wirelevantcontent';\n                    break;\n                case 'Empowerment':\n                    indicator = 'wiempowerment';\n                    break;\n                case 'Communications Infrastructure':\n                    indicator = 'wiinfrastructure';\n                    break;\n                case 'Access & Affordability':\n                    indicator = 'wiaccess';\n                    break;\n                case 'Education and Awareness':\n                    indicator = 'wieducation';\n                    break;\n                case 'Free & Open':\n                    indicator = 'wifreeopen';\n                    break;\n                case 'Content & use':\n                    indicator = 'wicontent';\n                    break;\n                case 'Economic':\n                    indicator = 'wieconomic';\n                    break;\n                case 'Political':\n                    indicator = 'wipolitical';\n                    break;\n                case 'Social and Environmental':\n                    indicator = 'wisocial';\n                    break;\n                case 'Overall score':\n                    indicator = 'wiscore';\n                    break;\n                case 'Overall rank':\n                    indicator = 'wirank';\n                    break;\n            }\n            // value : country scores\n            outputRecord(records[i], indicator, country, 2014, value);\n        }\n    } \n    var regex = new RegExp(\".+?(?=-)\");\n    var Countries = {}; // Key is indicator and value is country\n    var Values = {};\n    for(key in records[i].value){\n        var value = records[i].value[key];\n        if(key != 'filename'){\n            if(regex.test(key)){\n                var indicator = regex.exec(key);\n                Countries[indicator] = value;\n            } else {\n                Values[key] = value;\n            }\n        }\n    }\n    writeRecords(Values, Countries);\n}\nfunction hhnet(){\n    var record = records[i];\n    var value = record.value['value'];\n    var date = record.value['date'];\n    var country = record.value['country'];\n    if(value != \"\"){\n        outputRecord(record, 'hhnet', country, date, value);\n    }\n}\nfunction FOTN(){\n    var country = records[i].value['Country'];\n    var regex = new RegExp(\"[0-9]{4}\");\n    var Values = {}; \n    for(key in records[i].value){ // Settings a 'Values' key map in records[i] will cause there to be a [object Object] variable included in the for loop\n        var value = records[i].value[key];\n        if(key != 'filename' && key != 'Country'){\n            Values[key] = value;\n        }\n    }\n    for(key in Values){\n        var value = Values[key];\n        var ind;\n        switch(key){ // had to change file headers to make them consistent\n            case 'Internet Freedom Status':\n                ind = 'FOTNstatus';\n                break;\n            case 'Internet Freedom Total Score':\n                ind = 'FOTNtotal';\n                break;\n            case 'A: Obstacles to Access':\n                 ind = 'FOTNobstacles';\n                 break;\n            case 'B: Limits on Content':\n                 ind = 'FOTNlimits';\n                 break;\n            case 'C: Violations of User Rights':\n                 ind = 'FOTNviolations';\n                 break;\n        } \n        outputRecord(records[i], ind, country, regex.exec(records[i].value['filename']), value);\n    }\n}\n// ____________________________________________________\n// This code runs the logic for which script to run\nfor(var i = 0; i < records.length; i++) {\n    var fn = records[i].value['filename'];\n    var regex = new RegExp(\"([A-Z]{2})[A-Z]?[^A-Z][A-Z].csv\");\n    var regexFOTN = new RegExp(\"FOTN [0-9]{4}.csv\");\n    try {\n        switch(true){\n            case (fn == 'Mobile_cellular_2000-2014.csv'):\n                cellsub();\n                break;\n            case (fn == 'oni_country_data_2013-09-20.csv'):\n                ONI();\n                break;\n            case (fn == 'API_NY.GDP.PCAP.CD_DS2_en_csv_v2.csv' || fn == 'API_NY.GDP.PCAP.PP.CD_DS2_en_csv_v2.csv' || fn == 'API_SP.POP.TOTL_DS2_en_csv_v2.csv'):\n                gdp_pop();\n                break;\n            case (fn == 'WEF_NRI_2012-2015_Historical_Dataset.csv'):\n                nri1_68();\n                break;\n            case (fn == 'Gender_2010-2014.csv'):\n                ipr_mf();\n                break;\n            case (fn == 'Individuals_Internet_2000-2014.csv' || fn == 'Fixed_broadband_2000-2014.csv'):\n                ipr_fixnetsub();\n                break;\n            case (regex.test(fn)):\n                WebIndexData();\n                break;\n            case (fn == 'Survey Scores Primary Raw Data.csv'):\n                WebIndexSurvey();\n                break;\n            case (fn == 'Ranks & Scores.csv'):\n                WebIndexScores();\n                break;\n            case (fn == 'CoreHouseholdIndicator.csv'):\n                hhnet();\n                break;\n            case (regexFOTN.test(fn)):\n                FOTN();\n                break; \n        }\n    } catch (e) {\n        // Send record to error\n        error.write(records[i], e);\n    }\n}"
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Transform",
        "xPos" : 500,
        "yPos" : 50,
        "stageType" : "PROCESSOR"
      },
      "inputLanes" : [ "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor_01OutputLane14669864202300" ],
      "outputLanes" : [ "com_streamsets_pipeline_stage_processor_javascript_JavaScriptDProcessor_01OutputLane14669871177140" ]
    }, {
      "instanceName" : "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor_01",
      "library" : "streamsets-datacollector-jython_2_7-lib",
      "stageName" : "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "processingMode",
        "value" : "RECORD"
      }, {
        "name" : "script",
        "value" : "import sys\nfrom com.streamsets.pipeline.stage.processor.scripting import ScriptObjectFactory\nfrom javax.script import ScriptEngineManager\n\nif 'scriptObjectFactory' not in state:\n  engine = ScriptEngineManager(sys.classLoader).getEngineByName('jython')\n  state['scriptObjectFactory'] = ScriptObjectFactory(engine)\n\nfor record in records:\n  try:\n    list_map = state['scriptObjectFactory'].createMap(True) # True = ListMap, False = Map\n    list_map['${ID}'] = record.value['indicator']\n    list_map['${CT}'] = record.value['country']\n    list_map['${DT}'] = record.value['date']\n    list_map['${VL}'] = record.value['value']\n    \n    record.value = list_map\n\n    output.write(record)\n\n  except Exception as e:\n    # Send record to error\n    error.write(record, str(e))"
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Map to List-Map",
        "xPos" : 720,
        "yPos" : 50,
        "stageType" : "PROCESSOR"
      },
      "inputLanes" : [ "com_streamsets_pipeline_stage_processor_javascript_JavaScriptDProcessor_01OutputLane14669871177140" ],
      "outputLanes" : [ "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor_01OutputLane14665749692840" ]
    }, {
      "instanceName" : "com_streamsets_pipeline_stage_destination_localfilesystem_LocalFileSystemDTarget_07",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_localfilesystem_LocalFileSystemDTarget",
      "stageVersion" : "2",
      "configuration" : [ {
        "name" : "configs.uniquePrefix",
        "value" : "out_"
      }, {
        "name" : "configs.dirPathTemplateInHeader",
        "value" : false
      }, {
        "name" : "configs.dirPathTemplate",
        "value" : "${destination}"
      }, {
        "name" : "configs.timeZoneID",
        "value" : "UTC"
      }, {
        "name" : "configs.timeDriver",
        "value" : "${time:now()}"
      }, {
        "name" : "configs.maxRecordsPerFile",
        "value" : 0
      }, {
        "name" : "configs.maxFileSize",
        "value" : 0
      }, {
        "name" : "configs.idleTimeout",
        "value" : "${1 * HOURS}"
      }, {
        "name" : "configs.compression",
        "value" : "NONE"
      }, {
        "name" : "configs.otherCompression",
        "value" : null
      }, {
        "name" : "configs.keyEl",
        "value" : "${uuid()}"
      }, {
        "name" : "configs.lateRecordsLimit",
        "value" : "${1 * HOURS}"
      }, {
        "name" : "configs.rollIfHeader",
        "value" : false
      }, {
        "name" : "configs.rollHeaderName",
        "value" : "roll"
      }, {
        "name" : "configs.lateRecordsAction",
        "value" : "SEND_TO_ERROR"
      }, {
        "name" : "configs.lateRecordsDirPathTemplate",
        "value" : "/tmp/late/${YYYY()}-${MM()}-${DD()}"
      }, {
        "name" : "configs.dataFormat",
        "value" : "DELIMITED"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.charset",
        "value" : "UTF-8"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvFileFormat",
        "value" : "CSV"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvHeader",
        "value" : "WITH_HEADER"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvReplaceNewLines",
        "value" : true
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvReplaceNewLinesString",
        "value" : ""
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvCustomDelimiter",
        "value" : "|"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvCustomEscape",
        "value" : "\\"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.csvCustomQuote",
        "value" : "\""
      }, {
        "name" : "configs.dataGeneratorFormatConfig.jsonMode",
        "value" : "MULTIPLE_OBJECTS"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.textFieldPath",
        "value" : "/"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.textEmptyLineIfNull",
        "value" : false
      }, {
        "name" : "configs.dataGeneratorFormatConfig.avroSchemaInHeader",
        "value" : true
      }, {
        "name" : "configs.dataGeneratorFormatConfig.avroSchema",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.avroCompression",
        "value" : "NULL"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.binaryFieldPath",
        "value" : "/"
      }, {
        "name" : "configs.dataGeneratorFormatConfig.protoDescriptorFile",
        "value" : null
      }, {
        "name" : "configs.dataGeneratorFormatConfig.messageType",
        "value" : null
      }, {
        "name" : "stageOnRecordError",
        "value" : "TO_ERROR"
      }, {
        "name" : "stageRequiredFields",
        "value" : [ ]
      }, {
        "name" : "stageRecordPreconditions",
        "value" : [ ]
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "output",
        "xPos" : 944.2855834960938,
        "yPos" : 44.285682678222656,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor_01OutputLane14665749692840" ],
      "outputLanes" : [ ]
    } ],
    "errorStage" : {
      "instanceName" : "com_streamsets_pipeline_stage_destination_recordstolocalfilesystem_ToErrorLocalFSDTarget_ErrorStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_recordstolocalfilesystem_ToErrorLocalFSDTarget",
      "stageVersion" : "1",
      "configuration" : [ {
        "name" : "directory",
        "value" : "${error}"
      }, {
        "name" : "uniquePrefix",
        "value" : "sdc-${sdc:id()}"
      }, {
        "name" : "rotationIntervalSecs",
        "value" : "${1 * HOURS}"
      }, {
        "name" : "maxFileSizeMbs",
        "value" : 512
      } ],
      "uiInfo" : {
        "description" : "",
        "label" : "Error Records - Write to File",
        "xPos" : 1380,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ]
    },
    "info" : {
      "name" : "IM_CSV",
      "description" : "",
      "created" : 1467741487461,
      "lastModified" : 1467741600869,
      "creator" : "admin",
      "lastModifier" : "admin",
      "lastRev" : "0",
      "uuid" : "fc7edc25-ab80-4519-9bb6-48a484c1195c",
      "valid" : true,
      "metadata" : {
        "labels" : [ ]
      }
    },
    "metadata" : {
      "labels" : [ ]
    },
    "statsAggregatorStage" : {
      "instanceName" : "com_streamsets_pipeline_stage_destination_devnull_StatsNullDTarget_StatsAggregatorStage",
      "library" : "streamsets-datacollector-basic-lib",
      "stageName" : "com_streamsets_pipeline_stage_destination_devnull_StatsNullDTarget",
      "stageVersion" : "1",
      "configuration" : [ ],
      "uiInfo" : {
        "description" : "",
        "label" : "Stats Aggregator - Discard",
        "xPos" : 510,
        "yPos" : 50,
        "stageType" : "TARGET"
      },
      "inputLanes" : [ ],
      "outputLanes" : [ ]
    },
    "previewable" : true,
    "valid" : true,
    "issues" : {
      "pipelineIssues" : [ ],
      "stageIssues" : { },
      "issueCount" : 0
    }
  },
  "pipelineRules" : {
    "metricsRuleDefinitions" : [ {
      "id" : "badRecordsAlertID",
      "alertText" : "High incidence of Bad Records",
      "metricId" : "pipeline.batchErrorRecords.meter",
      "metricType" : "METER",
      "metricElement" : "METER_COUNT",
      "condition" : "${value() > 100}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1465696450113,
      "valid" : true
    }, {
      "id" : "stageErrorAlertID",
      "alertText" : "High incidence of Error Messages",
      "metricId" : "pipeline.batchErrorMessages.meter",
      "metricType" : "METER",
      "metricElement" : "METER_COUNT",
      "condition" : "${value() > 100}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1465696450113,
      "valid" : true
    }, {
      "id" : "idleGaugeID",
      "alertText" : "Pipeline is Idle",
      "metricId" : "RuntimeStatsGauge.gauge",
      "metricType" : "GAUGE",
      "metricElement" : "TIME_OF_LAST_RECEIVED_RECORD",
      "condition" : "${time:now() - value() > 120000}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1465696450113,
      "valid" : true
    }, {
      "id" : "batchTimeAlertID",
      "alertText" : "Batch taking more time to process",
      "metricId" : "RuntimeStatsGauge.gauge",
      "metricType" : "GAUGE",
      "metricElement" : "CURRENT_BATCH_AGE",
      "condition" : "${value() > 200}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1465696450113,
      "valid" : true
    }, {
      "id" : "memoryLimitAlertID",
      "alertText" : "Memory limit for pipeline exceeded",
      "metricId" : "pipeline.memoryConsumed.counter",
      "metricType" : "COUNTER",
      "metricElement" : "COUNTER_COUNT",
      "condition" : "${value() > (jvm:maxMemoryMB() * 0.65)}",
      "sendEmail" : false,
      "enabled" : false,
      "timestamp" : 1465696450113,
      "valid" : true
    } ],
    "dataRuleDefinitions" : [ ],
    "driftRuleDefinitions" : [ ],
    "emailIds" : [ ],
    "uuid" : "f9947779-fd78-49f6-9172-3f102dbd3f5e",
    "ruleIssues" : [ ]
  },
  "libraryDefinitions" : null
}